const AppError = require('./../utils/appError');

// GeÃ§ersiz JWT hatasÄ±nÄ±n yakalanmasÄ±
const handleJWTError = () =>
  new AppError('Invalid token. Please log in again!', 401);

// JWT'nin sÃ¼resinin dolmuÅŸ olmasÄ± durumunda hatanÄ±n yakalanmasÄ±
const handleJWTExpiredError = () =>
  new AppError('Your token has expired! Please log in again.', 401);

// MongoDB'den dÃ¶nen veri tipi hatalarÄ±nÄ±n yakalanmasÄ±
const handleCastErrorDB = (err) => {
  const message = `Invalid ${err.path}: ${err.value}.`;
  return new AppError(message, 400);
};

// MongoDB'de duplicate field hatasÄ±nÄ±n yakalanmasÄ±
const handleDuplicateFieldsDB = (err) => {
  const message = `Duplicate field value: ${err.keyValue.name}. Please use another value!`;
  return new AppError(message, 400);
};

// MongoDB'de doÄŸrulama hatasÄ±nÄ±n yakalanmasÄ±
const handleValidationErrorDB = (err) => {
  const errors = Object.values(err.errors).map((el) => el.message);

  const message = `Invalid input data. ${errors.join('. ')}`;
  return new AppError(message, 400);
};

// GeliÅŸtirme ortamÄ±nda hata mesajlarÄ±nÄ±n gÃ¶nderilmesi
const sendErrorDev = (err, req, res) => {
  if (req.originalUrl.startsWith('/api')) {
    return res.status(err.statusCode).json({
      status: err.status,
      error: err,
      message: err.message,
      stack: err.stack,
    });
  }
};

// YayÄ±nlanmÄ±ÅŸ projede hata mesajlarÄ±nÄ±n gÃ¶nderilmesi
const sendErrorProd = (err, req, res) => {
  if (req.originalUrl.startsWith('/api')) {
    // Ä°ÅŸlemsel hatalarÄ±n kullanÄ±cÄ±ya gÃ¶sterilmesi
    if (err.isOperational) {
      return res.status(err.statusCode).json({
        status: err.status,
        message: err.message,
      });
    }

    // Programlama veya diÄŸer bilinmeyen hatalarÄ±n kullanÄ±cÄ±ya gÃ¶sterilmesi
    console.error('ERROR ğŸ’¥', err);
    return res.status(500).json({
      status: 'error',
      message: 'Something went very wrong!',
    });
  }

  // Ä°ÅŸlemsel hatalarÄ±n kullanÄ±cÄ±ya gÃ¶sterilmesi
  if (err.isOperational) {
    return res.status(err.statusCode).json('error', {
      title: 'Something went wrong!',
      message: err.message,
    });
  }

  // Programlama veya diÄŸer bilinmeyen hatalarÄ±n kullanÄ±cÄ±ya gÃ¶sterilmesi
  console.error('ERROR ğŸ’¥', err);
  return res.status(err.statusCode).json('error', {
    title: 'Something went wrong!',
    message: 'Please try again later.',
  });
};

module.exports = (err, req, res, next) => {
  // Hata kodu ve mesajÄ± tanÄ±mlanmasÄ±
  err.statusCode = err.statusCode || 500;
  err.status = err.status || 'error';
  // GeliÅŸtirme ve yayÄ±n ortamlarÄ±na gÃ¶re hata mesajlarÄ±nÄ±n gÃ¶sterilmesi

  if (process.env.NODE_ENV === 'development') {
    // GeliÅŸtirme ortamÄ±
    sendErrorDev(err, req, res);
  } else if (process.env.NODE_ENV === 'production') {
    // YayÄ±n ortamÄ±
    let error = { ...err };
    if (error.name === 'CastError')
      // MongoDB'den dÃ¶nen veri tipi hatasÄ±nÄ±n yakalanmasÄ±
      error = handleCastErrorDB({
        path: err.path,
        value: err.value,
        name: err.name,
      });
    // DÃ¶nen hata tiplerine gÃ¶re gerekli fonksiyonlarÄ±n Ã§aÄŸrÄ±lmasÄ±
    if (error.code === 11000) error = handleDuplicateFieldsDB(error);
    if (error.name === 'ValidationError')
      error = handleValidationErrorDB(error);
    if (error.name === 'JsonWebTokenError') error = handleJWTError();
    if (error.name === 'TokenExpiredError') error = handleJWTExpiredError();

    sendErrorProd(error, req, res);
  }
};
